using ClientCore;
using ClientGUI;
using DTAClient.domain;
using Microsoft.Xna.Framework;
using Rampastring.Tools;
using Rampastring.XNAUI;
using Rampastring.XNAUI.DXControls;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace DTAClient.DXGUI.Generic
{
    public class GameLoadingWindow : DXWindow
    {
        public GameLoadingWindow(WindowManager windowManager) : base(windowManager)
        {

        }

        DXMultiColumnListBox lbSaveGameList;
        DXButton btnLaunch;
        List<SavedGame> savedGames = new List<SavedGame>();

        public override void Initialize()
        {
            Name = "GameLoadingWindow";
            BackgroundTexture = AssetLoader.LoadTexture("loadmissionbg.png");

            ClientRectangle = new Rectangle(0, 0, 600, 380);
            CenterOnParent();

            lbSaveGameList = new DXMultiColumnListBox(WindowManager);
            lbSaveGameList.Name = "lbSaveGameList";
            lbSaveGameList.AddColumn("SAVED GAME NAME", 400);
            lbSaveGameList.AddColumn("DATE / TIME", 174);
            lbSaveGameList.ClientRectangle = new Rectangle(13, 13, 574, 317);
            lbSaveGameList.BackgroundTexture = AssetLoader.LoadTexture("loadmissionpanelbg.png");
            lbSaveGameList.SelectedIndexChanged += ListBox_SelectedIndexChanged;

            btnLaunch = new DXButton(WindowManager);
            btnLaunch.IdleTexture = AssetLoader.LoadTexture("133pxbtn.png");
            btnLaunch.HoverTexture = AssetLoader.LoadTexture("133pxbtn_c.png");
            btnLaunch.HoverSoundEffect = AssetLoader.LoadSound("button.wav");
            btnLaunch.ClientRectangle = new Rectangle(161, 345, 133, 23);
            btnLaunch.FontIndex = 1;
            btnLaunch.Text = "Load";
            btnLaunch.AllowClick = false;
            btnLaunch.LeftClick += BtnLaunch_LeftClick;

            DXButton btnCancel = new DXButton(WindowManager);
            btnCancel.Name = "btnCancel";
            btnCancel.IdleTexture = AssetLoader.LoadTexture("133pxbtn.png");
            btnCancel.HoverTexture = AssetLoader.LoadTexture("133pxbtn_c.png");
            btnCancel.HoverSoundEffect = AssetLoader.LoadSound("button.wav");
            btnCancel.ClientRectangle = new Rectangle(304, btnLaunch.ClientRectangle.Y, 133, 23);
            btnCancel.FontIndex = 1;
            btnCancel.Text = "Cancel";
            btnCancel.LeftClick += BtnCancel_LeftClick;

            AddChild(lbSaveGameList);
            AddChild(btnLaunch);
            AddChild(btnCancel);

            base.Initialize();

            ListSaves();
        }

        private void ListBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (lbSaveGameList.SelectedIndex == -1)
                btnLaunch.AllowClick = false;
            else
                btnLaunch.AllowClick = true;
        }

        private void BtnCancel_LeftClick(object sender, EventArgs e)
        {
            Enabled = false;
        }

        private void BtnLaunch_LeftClick(object sender, EventArgs e)
        {
            SavedGame sg = savedGames[lbSaveGameList.SelectedIndex];
            Logger.Log("Loading saved game " + sg.FileName);

            File.Delete(MainClientConstants.gamepath + MainClientConstants.SPAWNER_SETTINGS);
            StreamWriter sw = new StreamWriter(MainClientConstants.gamepath + MainClientConstants.SPAWNER_SETTINGS);
            sw.WriteLine("; generated by DTA Launcher");
            sw.WriteLine("[Settings]");
            sw.WriteLine("Scenario=spawnmap.ini");
            sw.WriteLine("SaveGameName=" + sg.FileName);
            sw.WriteLine("LoadSaveGame=Yes");
            sw.WriteLine("SidebarHack=" + MCDomainController.Instance.GetSidebarHackStatus());
            sw.WriteLine("Firestorm=No");
            sw.WriteLine("GameSpeed=" + MCDomainController.Instance.GetGameSpeed());
            sw.WriteLine();
            sw.Close();

            File.Delete(ProgramConstants.GamePath + "spawnmap.ini");
            sw = new StreamWriter(ProgramConstants.GamePath + "spawnmap.ini");
            sw.WriteLine("[Map]");
            sw.WriteLine("Size=0,0,50,50");
            sw.WriteLine("LocalSize=0,0,50,50");
            sw.WriteLine();
            sw.Close();

            Logger.Log("About to launch main executable.");

            ((MainMenuDarkeningPanel)Parent).Hide();
            SharedUILogic.StartGameProcess(0);
        }

        public void ListSaves()
        {
            savedGames.Clear();
            lbSaveGameList.ClearItems();

            string[] files = Directory.GetFiles(MainClientConstants.gamepath + "Saved Games\\", "*.SAV", SearchOption.TopDirectoryOnly);

            foreach (string file in files)
            {
                ParseSaveGame(file);
            }

            savedGames = savedGames.OrderBy(sg => sg.LastModified.Ticks).ToList();

            foreach (SavedGame sg in savedGames)
            {
                string[] item = new string[] { sg.GUIName, sg.LastModified.ToString() };
                lbSaveGameList.AddItem(item, true);
            }
        }

        private void ParseSaveGame(string fileName)
        {
            string shortName = Path.GetFileName(fileName);

            SavedGame sg = new SavedGame(shortName);
            if (sg.ParseInfo())
                savedGames.Add(sg);
        }
    }
}
