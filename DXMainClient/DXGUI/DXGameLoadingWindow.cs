using ClientCore;
using ClientGUI;
using dtasetup.domain;
using Microsoft.Xna.Framework;
using Rampastring.Tools;
using Rampastring.XNAUI;
using Rampastring.XNAUI.DXControls;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace dtasetup.DXGUI
{
    public class DXGameLoadingWindow : DXWindow
    {
        public DXGameLoadingWindow(Game game) : base(game)
        {

        }

        DXMultiColumnListBox listBox;
        DXButton btnLaunch;
        List<SavedGame> savedGames = new List<SavedGame>();

        public override void Initialize()
        {
            Name = "GameLoadingWindow";
            BackgroundTexture = AssetLoader.LoadTexture("loadmissionbg.png");

            ClientRectangle = new Rectangle(0, 0, 600, 380);
            CenterOnParent();

            listBox = new DXMultiColumnListBox(Game);
            listBox.AddColumn("SAVED GAME NAME", 400);
            listBox.AddColumn("DATE / TIME", 174);
            listBox.ClientRectangle = new Rectangle(13, 13, 574, 300);
            listBox.SelectedIndexChanged += ListBox_SelectedIndexChanged;

            btnLaunch = new DXButton(Game);
            btnLaunch.IdleTexture = AssetLoader.LoadTexture("133pxbtn.png");
            btnLaunch.HoverTexture = AssetLoader.LoadTexture("133pxbtn_c.png");
            btnLaunch.HoverSoundEffect = AssetLoader.LoadSound("button.wav");
            btnLaunch.ClientRectangle = new Rectangle(161, 328, 133, 23);
            btnLaunch.FontIndex = 1;
            btnLaunch.Text = "Load";
            btnLaunch.AllowClick = false;
            btnLaunch.LeftClick += BtnLaunch_LeftClick;

            DXButton btnCancel = new DXButton(Game);
            btnCancel.Name = "btnCancel";
            btnCancel.IdleTexture = AssetLoader.LoadTexture("133pxbtn.png");
            btnCancel.HoverTexture = AssetLoader.LoadTexture("133pxbtn_c.png");
            btnCancel.HoverSoundEffect = AssetLoader.LoadSound("button.wav");
            btnCancel.ClientRectangle = new Rectangle(304, btnLaunch.ClientRectangle.Y, 133, 23);
            btnCancel.FontIndex = 1;
            btnCancel.Text = "Cancel";
            btnCancel.LeftClick += BtnCancel_LeftClick;

            AddChild(listBox);
            AddChild(btnLaunch);
            AddChild(btnCancel);

            base.Initialize();

            ListSaves();
        }

        private void ListBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (listBox.SelectedIndex == -1)
                btnLaunch.AllowClick = false;
            else
                btnLaunch.AllowClick = true;
        }

        private void BtnCancel_LeftClick(object sender, EventArgs e)
        {
            ((MainMenuDarkeningPanel)Parent).Hide();
        }

        private void BtnLaunch_LeftClick(object sender, EventArgs e)
        {
            SavedGame sg = savedGames[listBox.SelectedIndex];
            Logger.Log("Loading saved game " + sg.FileName);

            File.Delete(MainClientConstants.gamepath + MainClientConstants.SPAWNER_SETTINGS);
            StreamWriter sw = new StreamWriter(MainClientConstants.gamepath + MainClientConstants.SPAWNER_SETTINGS);
            sw.WriteLine("; generated by DTA Launcher");
            sw.WriteLine("[Settings]");
            sw.WriteLine("Scenario=spawnmap.ini");
            sw.WriteLine("SaveGameName=" + sg.FileName);
            sw.WriteLine("LoadSaveGame=Yes");
            sw.WriteLine("SidebarHack=" + MCDomainController.Instance().GetSidebarHackStatus());
            sw.WriteLine("Firestorm=No");
            sw.WriteLine("GameSpeed=" + MCDomainController.Instance().GetGameSpeed());
            sw.WriteLine();
            sw.WriteLine();
            sw.WriteLine();
            sw.Close();

            File.Delete(ProgramConstants.gamepath + "spawnmap.ini");
            sw = new StreamWriter(ProgramConstants.gamepath + "spawnmap.ini");
            sw.WriteLine("[Map]");
            sw.WriteLine("Size=0,0,50,50");
            sw.WriteLine("LocalSize=0,0,50,50");
            sw.WriteLine();
            sw.Close();

            Logger.Log("About to launch main executable.");

            ((MainMenuDarkeningPanel)Parent).Hide();
            SharedUILogic.StartGameProcess(0);
        }

        public void ListSaves()
        {
            savedGames.Clear();
            listBox.ClearItems();

            string[] files = Directory.GetFiles(MainClientConstants.gamepath + "Saved Games\\", "*.SAV", SearchOption.TopDirectoryOnly);

            foreach (string file in files)
            {
                ParseSaveGame(file);
            }

            savedGames = savedGames.OrderBy(sg => sg.LastModified.Ticks).ToList();

            foreach (SavedGame sg in savedGames)
            {
                string[] item = new string[] { sg.GUIName, sg.LastModified.ToString() };
                listBox.AddItem(item, true);
            }
        }

        private void ParseSaveGame(string fileName)
        {
            string shortName = Path.GetFileName(fileName);

            try
            {
                Logger.Log("Attempting to read saved game " + shortName);
                BinaryReader br = new BinaryReader(File.Open(fileName, FileMode.Open, FileAccess.Read));

                br.BaseStream.Position = 2256; // 00000980

                string saveGameName = String.Empty;
                // Read name until we encounter two zero-bytes
                bool wasLastByteZero = false;
                while (true)
                {
                    byte characterByte = br.ReadByte();
                    if (characterByte == 0)
                    {
                        if (wasLastByteZero)
                            break;
                        wasLastByteZero = true;
                    }
                    else
                    {
                        wasLastByteZero = false;
                        char character = Convert.ToChar(characterByte);
                        saveGameName = saveGameName + character;
                    }

                    Console.WriteLine();
                }

                SavedGame savedGame = new SavedGame();
                savedGame.FileName = shortName;
                savedGame.GUIName = saveGameName;
                DateTime saveGameModifyDate = File.GetLastWriteTime(fileName);
                savedGame.LastModified = saveGameModifyDate;

                Logger.Log("Saved game " + shortName + " parsed succesfully.");

                savedGames.Add(savedGame);

                br.Close();
            }
            catch (Exception ex)
            {
                Logger.Log("An error occured while parsing saved game " + shortName + ":" +
                    ex.Message);
            }
        }
    }
}
